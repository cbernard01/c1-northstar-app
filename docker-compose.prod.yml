version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: c1-northstar-db-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - c1-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  redis:
    image: redis:7.2-alpine
    container_name: c1-northstar-redis-prod
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./scripts/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - c1-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.125'

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: c1-northstar-qdrant-prod
    restart: always
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: WARN
      QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS: 2
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s
    networks:
      - c1-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: c1-northstar-app-prod
    restart: always
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_MICROSOFT_ENTRA_ID_ID: ${AUTH_MICROSOFT_ENTRA_ID_ID}
      AUTH_MICROSOFT_ENTRA_ID_SECRET: ${AUTH_MICROSOFT_ENTRA_ID_SECRET}
      AUTH_MICROSOFT_ENTRA_ID_TENANT_ID: ${AUTH_MICROSOFT_ENTRA_ID_TENANT_ID}
      WEBSOCKET_PORT: 3001
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      AZURE_STORAGE_ACCOUNT: ${AZURE_STORAGE_ACCOUNT}
      AZURE_STORAGE_KEY: ${AZURE_STORAGE_KEY}
      AZURE_CONTAINER_NAME: ${AZURE_CONTAINER_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: >
      sh -c "./scripts/wait-for-services.sh && 
             npx prisma migrate deploy && 
             node server.js"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - c1-network
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    deploy:
      replicas: ${APP_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: c1-northstar-worker-prod
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-4}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      AZURE_STORAGE_ACCOUNT: ${AZURE_STORAGE_ACCOUNT}
      AZURE_STORAGE_KEY: ${AZURE_STORAGE_KEY}
      AZURE_CONTAINER_NAME: ${AZURE_CONTAINER_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: >
      sh -c "./scripts/wait-for-services.sh && 
             node scripts/start-workers.js"
    networks:
      - c1-network
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  nginx:
    image: nginx:alpine
    container_name: c1-northstar-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./scripts/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - c1-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  c1-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16