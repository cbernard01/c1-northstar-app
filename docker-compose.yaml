version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    container_name: c1-northstar-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-northstar}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-northstar_password}
      POSTGRES_DB: ${POSTGRES_DB:-northstar_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-northstar} -d ${POSTGRES_DB:-northstar_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - c1-network

  redis:
    image: redis:7.2-alpine
    container_name: c1-northstar-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - c1-network

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: c1-northstar-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - c1-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: c1-northstar-app
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-northstar}:${POSTGRES_PASSWORD:-northstar_password}@postgres:5432/${POSTGRES_DB:-northstar_db}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_MICROSOFT_ENTRA_ID_ID: ${AUTH_MICROSOFT_ENTRA_ID_ID}
      AUTH_MICROSOFT_ENTRA_ID_SECRET: ${AUTH_MICROSOFT_ENTRA_ID_SECRET}
      AUTH_MICROSOFT_ENTRA_ID_TENANT_ID: ${AUTH_MICROSOFT_ENTRA_ID_TENANT_ID}
      WEBSOCKET_PORT: 3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: >
      sh -c "./scripts/wait-for-services.sh && 
             npx prisma migrate deploy && 
             node server.js"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - c1-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: c1-northstar-worker
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-northstar}:${POSTGRES_PASSWORD:-northstar_password}@postgres:5432/${POSTGRES_DB:-northstar_db}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-2}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    command: >
      sh -c "./scripts/wait-for-services.sh && 
             node scripts/start-workers.js"
    networks:
      - c1-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    deploy:
      replicas: ${WORKER_REPLICAS:-1}

volumes:
  postgres_data:
  redis_data:
  qdrant_data:

networks:
  c1-network:
    driver: bridge
